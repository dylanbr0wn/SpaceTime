/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Department: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    id: number; // Int!
    isActive: boolean; // Boolean!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  EntryComment: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    text: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Period: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    endDate: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    startDate: NexusGenScalars['DateTime']; // DateTime!
  }
  Profile: { // root type
    avatar: string; // String!
    bio?: string | null; // String
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
  }
  Project: { // root type
    code: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    id: number; // Int!
    isActive: boolean; // Boolean!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: {};
  TimeEntry: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: NexusGenScalars['DateTime']; // DateTime!
    hours: number; // Float!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  TimeEntryRow: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Timesheet: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // root type
    code: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: number; // Int!
    isActive: boolean; // Boolean!
    isAdmin: boolean; // Boolean!
    isManager: boolean; // Boolean!
    isPaymentManager: boolean; // Boolean!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  WorkType: { // root type
    code: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    id: number; // Int!
    isActive: boolean; // Boolean!
    isBillable: boolean; // Boolean!
    isDefault: boolean; // Boolean!
    isSystem: boolean; // Boolean!
    multiplier: number; // Float!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Department: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    id: number; // Int!
    isActive: boolean; // Boolean!
    name: string; // String!
    projects: NexusGenRootTypes['Project'][]; // [Project!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  EntryComment: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    text: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Period: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    endDate: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    startDate: NexusGenScalars['DateTime']; // DateTime!
  }
  Profile: { // field return type
    avatar: string; // String!
    bio: string | null; // String
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
  }
  Project: { // field return type
    code: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    department: NexusGenRootTypes['Department']; // Department!
    description: string | null; // String
    id: number; // Int!
    isActive: boolean; // Boolean!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: { // field return type
    allUsers: NexusGenRootTypes['User'][]; // [User!]!
    timesheet: NexusGenRootTypes['Timesheet'] | null; // Timesheet
  }
  TimeEntry: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: NexusGenScalars['DateTime']; // DateTime!
    department: NexusGenRootTypes['Department']; // Department!
    entryComments: NexusGenRootTypes['EntryComment'][]; // [EntryComment!]!
    hours: number; // Float!
    id: number; // Int!
    project: NexusGenRootTypes['Project']; // Project!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    workType: NexusGenRootTypes['WorkType']; // WorkType!
  }
  TimeEntryRow: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    date: NexusGenScalars['DateTime']; // DateTime!
    department: NexusGenRootTypes['Department']; // Department!
    id: number; // Int!
    project: NexusGenRootTypes['Project']; // Project!
    timeEntries: NexusGenRootTypes['TimeEntry'][]; // [TimeEntry!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    workType: NexusGenRootTypes['WorkType']; // WorkType!
  }
  Timesheet: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    period: NexusGenRootTypes['Period']; // Period!
    timeEntryRows: NexusGenRootTypes['TimeEntryRow'][]; // [TimeEntryRow!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    code: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    department: NexusGenRootTypes['Department']; // Department!
    email: string; // String!
    id: number; // Int!
    isActive: boolean; // Boolean!
    isAdmin: boolean; // Boolean!
    isManager: boolean; // Boolean!
    isPaymentManager: boolean; // Boolean!
    managees: NexusGenRootTypes['User'][]; // [User!]!
    manager: NexusGenRootTypes['User'] | null; // User
    profile: NexusGenRootTypes['Profile'] | null; // Profile
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  WorkType: { // field return type
    code: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    id: number; // Int!
    isActive: boolean; // Boolean!
    isBillable: boolean; // Boolean!
    isDefault: boolean; // Boolean!
    isSystem: boolean; // Boolean!
    multiplier: number; // Float!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
}

export interface NexusGenFieldTypeNames {
  Department: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    id: 'Int'
    isActive: 'Boolean'
    name: 'String'
    projects: 'Project'
    updatedAt: 'DateTime'
    users: 'User'
  }
  EntryComment: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    text: 'String'
    updatedAt: 'DateTime'
  }
  Period: { // field return type name
    createdAt: 'DateTime'
    endDate: 'DateTime'
    id: 'Int'
    startDate: 'DateTime'
  }
  Profile: { // field return type name
    avatar: 'String'
    bio: 'String'
    firstName: 'String'
    id: 'Int'
    lastName: 'String'
  }
  Project: { // field return type name
    code: 'String'
    createdAt: 'DateTime'
    department: 'Department'
    description: 'String'
    id: 'Int'
    isActive: 'Boolean'
    name: 'String'
    updatedAt: 'DateTime'
  }
  Query: { // field return type name
    allUsers: 'User'
    timesheet: 'Timesheet'
  }
  TimeEntry: { // field return type name
    createdAt: 'DateTime'
    date: 'DateTime'
    department: 'Department'
    entryComments: 'EntryComment'
    hours: 'Float'
    id: 'Int'
    project: 'Project'
    updatedAt: 'DateTime'
    user: 'User'
    workType: 'WorkType'
  }
  TimeEntryRow: { // field return type name
    createdAt: 'DateTime'
    date: 'DateTime'
    department: 'Department'
    id: 'Int'
    project: 'Project'
    timeEntries: 'TimeEntry'
    updatedAt: 'DateTime'
    user: 'User'
    workType: 'WorkType'
  }
  Timesheet: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    period: 'Period'
    timeEntryRows: 'TimeEntryRow'
    updatedAt: 'DateTime'
    user: 'User'
  }
  User: { // field return type name
    code: 'String'
    createdAt: 'DateTime'
    department: 'Department'
    email: 'String'
    id: 'Int'
    isActive: 'Boolean'
    isAdmin: 'Boolean'
    isManager: 'Boolean'
    isPaymentManager: 'Boolean'
    managees: 'User'
    manager: 'User'
    profile: 'Profile'
    updatedAt: 'DateTime'
  }
  WorkType: { // field return type name
    code: 'String'
    createdAt: 'DateTime'
    description: 'String'
    id: 'Int'
    isActive: 'Boolean'
    isBillable: 'Boolean'
    isDefault: 'Boolean'
    isSystem: 'Boolean'
    multiplier: 'Float'
    name: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Query: {
    timesheet: { // args
      periodId?: number | null; // Int
      userId?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}